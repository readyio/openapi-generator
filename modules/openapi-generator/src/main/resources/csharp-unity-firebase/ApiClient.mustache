{{>partial_header}}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using RGN.FunctionsClient;
using RGN.Dependencies.Core.Functions;
using RGN.Modules.{{packageName}}.FunctionsClient.{{modelPackage}};

namespace RGN.Modules.{{packageName}}.FunctionsClient
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    {{>visibility}} partial class ApiClient
    {
        private readonly IRGNRolesCore mRgnCore;

        {{#operations}}
        {{#operation}}
        private readonly IHttpsCallableReference m{{operationId}}Function;
        {{/operation}}
        {{/operations}}

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// </summary>
        /// <param name="rgnCore">An instance of RGNCore.</param>
        public ApiClient(IRGNRolesCore rgnCore)
        {
            mRgnCore = rgnCore;
        {{#operations}}
        {{#operation}}
            m{{operationId}}Function = mRgnCore.readyMasterFunction.GetHttpsCallable("{{#lambda.camelcase_param}}{{packageName}}{{/lambda.camelcase_param}}-{{#lambda.camelcase_param}}{{operationId}}{{/lambda.camelcase_param}}");
        {{/operation}}
        {{/operations}}
        }

        {{#operations}}
        {{#operation}}
        /// <summary>
        /// {{{summary}}}
        /// </summary>
        /// <remarks>
        /// {{{notes}}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}/// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of {{{returnType}}}{{^returnType}}void{{/returnType}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public async {{#returnType}}Task<{{{.}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default({{{dataType}}}){{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>() {
                {{#allParams}}{ "{{paramName}}", {{paramName}} }{{^-last}},
                {{/-last}}{{/allParams}}
            };
            try
            {
                var result = await m{{operationId}}Function.CallAsync(parameters);
                cancellationToken.ThrowIfCancellationRequested();
                var dictResult = (IDictionary<object, object>)result.Data;
                var strResult = (string)dictResult["result"];
                return {{#returnType}}{{{returnType}}}{{/returnType}}.FromJson(mRgnCore.Dependencies.Json, strResult);
            }
            catch (Exception e)
            {
                throw new ApiException(e.Message);
            }
        }
        {{/operation}}
        {{/operations}}
    }
}
